// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_image_processing.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterImageProcessingBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterImageProcessingBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterImageProcessingBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> opencvVersion() {
    return _opencvVersion();
  }

  late final _opencvVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'opencvVersion');
  late final _opencvVersion =
      _opencvVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void GaussianBlur(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _GaussianBlur(
      path,
    );
  }

  late final _GaussianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'GaussianBlur');
  late final _GaussianBlur =
      _GaussianBlurPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void CannyDetector(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _CannyDetector(
      path,
    );
  }

  late final _CannyDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'CannyDetector');
  late final _CannyDetector =
      _CannyDetectorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void medianBlur(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _medianBlur(
      path,
    );
  }

  late final _medianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'medianBlur');
  late final _medianBlur =
      _medianBlurPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void bilateralFilter(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _bilateralFilter(
      path,
    );
  }

  late final _bilateralFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'bilateralFilter');
  late final _bilateralFilter =
      _bilateralFilterPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void erosion(
    ffi.Pointer<ffi.Char> path,
    int erosion_type,
    int erosion_elem,
    int erosion_size,
  ) {
    return _erosion(
      path,
      erosion_type,
      erosion_elem,
      erosion_size,
    );
  }

  late final _erosionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int)>>('erosion');
  late final _erosion = _erosionPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void dilation(
    ffi.Pointer<ffi.Char> path,
    int dilation_type,
    int dilation_elem,
    int dilation_size,
  ) {
    return _dilation(
      path,
      dilation_type,
      dilation_elem,
      dilation_size,
    );
  }

  late final _dilationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int)>>('dilation');
  late final _dilation = _dilationPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int, int)>();
}
